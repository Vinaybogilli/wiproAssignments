package com.appointment.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.appointment.entity.Doctor;
import com.appointment.entity.DoctorDTO;
import com.appointment.repo.DoctorRepository;

import jakarta.transaction.Transactional;

import org.springframework.stereotype.Service;

@Service
public class DoctorServiceImpl implements DoctorService{
	
	
	@Autowired
	private final DoctorRepository doctorRepository;
	
	public DoctorServiceImpl(DoctorRepository doctorRepository) {
		this.doctorRepository=doctorRepository;
	}
	
	public DoctorDTO converttoDTO(Doctor doctor) {
		DoctorDTO doctorDTO=new DoctorDTO();
		doctorDTO.setId(doctor.getId());
		doctorDTO.setName(doctor.getName());
		doctorDTO.setHospitalName(doctor.getHospitalName());
		doctorDTO.setSpeciality(doctor.getSpeciality());
		doctorDTO.setDailyTime(doctor.getDailyTime());
		return doctorDTO;
		
	}

	@Override
	public DoctorDTO createdoctor(DoctorDTO doctorDTO) {
		
		Doctor savedDoctor=new Doctor();
		savedDoctor.setName(doctorDTO.getName());
		savedDoctor.setHospitalName(doctorDTO.getHospitalName());
		savedDoctor.setSpeciality(doctorDTO.getSpeciality());
		savedDoctor.setDailyTime(doctorDTO.getDailyTime());
		
		doctorRepository.save(savedDoctor);
		return converttoDTO(savedDoctor);
	}

	@Override
	public Page<DoctorDTO> getAllDoctors(Pageable pageable) {
	    Page<Doctor> doctorsPage = doctorRepository.findAll(pageable);
	    
	    return doctorsPage.map(this::converttoDTO);
	}

	@Override
	public DoctorDTO changeDoctor(Long id, DoctorDTO doctorDTO) {
		
		Doctor existingDoctor = doctorRepository.findById(id)
			    .orElseThrow(() -> new RuntimeException("User not found with id " + id));

			if (doctorDTO.getName() != null) {
			    existingDoctor.setName(doctorDTO.getName());
			}

			if (doctorDTO.getHospitalName() != null) {
			    existingDoctor.setHospitalName(doctorDTO.getHospitalName());
			}

			if (doctorDTO.getSpeciality() != null) {
			    existingDoctor.setSpeciality(doctorDTO.getSpeciality());
			}

			if (doctorDTO.getDailyTime() != null) {
			    existingDoctor.setDailyTime(doctorDTO.getDailyTime());
			}

			
			Doctor updatedDoctor = doctorRepository.save(existingDoctor);

			
			return converttoDTO(updatedDoctor);

	}

	@Transactional
	@Override
	public boolean deleteDoctor(Long doctorId) throws RuntimeException {
	    Doctor doctor = doctorRepository.findById(doctorId)
	        .orElseThrow(() -> new RuntimeException("Doctor not found with id " + doctorId));

	    doctorRepository.delete(doctor);

	    return true;
	}

	
	
	
	
	


}
