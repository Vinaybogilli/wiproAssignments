package com.appointment.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.appointment.entity.DoctorDTO;
import com.appointment.service.DoctorService;

@RestController
@RequestMapping("/api/doctor")
public class Doctorcontroller {
	
	@Autowired
	private final DoctorService doctorservice;
	
	public Doctorcontroller(DoctorService doctorservice) {
		this.doctorservice=doctorservice;
	}
	
	@PostMapping("/doctors")
	public ResponseEntity<DoctorDTO> createDoctor(@Validated @RequestBody DoctorDTO doctorDTO) {
	    DoctorDTO savedDoctor = doctorservice.createdoctor(doctorDTO);
	    return ResponseEntity.status(HttpStatus.CREATED).body(savedDoctor);
	}
	
	@GetMapping("/doctors")
	public ResponseEntity<Page<DoctorDTO>> getAllDoctors(
	        @RequestParam(defaultValue = "0") int page,
	        @RequestParam(defaultValue = "10") int size) {

	    Pageable pageable = PageRequest.of(page, size, Sort.by("name").ascending());

	    Page<DoctorDTO> doctorPage = doctorservice.getAllDoctors(pageable);

	    return ResponseEntity.ok(doctorPage);
	}
	
	@PutMapping("/change/{id}")
	public ResponseEntity<DoctorDTO> changeDoctor(@PathVariable Long id , @Validated @RequestBody DoctorDTO doctorDTO){
		DoctorDTO doctorDTO1=doctorservice.changeDoctor(id,doctorDTO);
		return ResponseEntity.ok(doctorDTO1);
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<Void> deleteDoctor(@PathVariable Long id) {
	    doctorservice.deleteDoctor(id);
	    return ResponseEntity.noContent().build();
	}

	
		
}


